{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\fawzi\\\\OneDrive\\\\Bureau\\\\test-technique-angular-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\fawzi\\\\OneDrive\\\\Bureau\\\\test-technique-angular-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { EventEmitter } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\n\nfunction PersonGeneratorComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" La valeur doit \\xEAtre inf\\xE9rieure ou \\xE9gale \\xE0 1000. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport var PersonGeneratorComponent = /*#__PURE__*/(function () {\n  var PersonGeneratorComponent = /*#__PURE__*/function () {\n    function PersonGeneratorComponent(formBuilder) {\n      _classCallCheck(this, PersonGeneratorComponent);\n\n      this.formBuilder = formBuilder;\n      this.rateControl = new FormControl(\"\", [Validators.max(1000), Validators.min(0)]);\n      this.generateRequest = new EventEmitter();\n    }\n\n    _createClass(PersonGeneratorComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.generator = this.formBuilder.group({\n          count: [50, [Validators.required, Validators.min(1), this.countValidator]],\n          male: [true],\n          female: [true]\n        }, {\n          validators: this.genderSelectionValidator\n        });\n      }\n    }, {\n      key: \"countValidator\",\n      value: function countValidator(control) {\n        var count = control.value;\n\n        if (count > 1000) {\n          console.log(\"countValidator\");\n          return {\n            countExceeded: true\n          };\n        }\n\n        return null;\n      }\n    }, {\n      key: \"genderSelectionValidator\",\n      value: function genderSelectionValidator(form) {\n        var male = form.get(\"male\").value;\n        var female = form.get(\"female\").value;\n\n        if (!male && !female) {\n          return {\n            genderRequired: true\n          };\n        }\n\n        return null;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate() {\n        var value = this.generator.value;\n        if (this.generator.valid) this.generateRequest.emit(value);\n      }\n    }]);\n\n    return PersonGeneratorComponent;\n  }();\n\n  PersonGeneratorComponent.ɵfac = function PersonGeneratorComponent_Factory(t) {\n    return new (t || PersonGeneratorComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n\n  PersonGeneratorComponent.ɵcmp = i0.ɵɵdefineComponent({\n    type: PersonGeneratorComponent,\n    selectors: [[\"app-person-generator\"]],\n    outputs: {\n      generateRequest: \"generateRequest\"\n    },\n    decls: 17,\n    vars: 3,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"title\"], [1, \"hint\"], [1, \"count\"], [\"matInput\", \"\", \"type\", \"number\", \"placeholder\", \"Nombre\", \"formControlName\", \"count\", \"max\", \"1000\", \"min\", \"1\", \"formControlName\", \"count\"], [4, \"ngIf\"], [1, \"gender\"], [\"formControlName\", \"male\", 1, \"Homme\"], [\"formControlName\", \"female\", 1, \"Femme\"], [1, \"actions\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\"]],\n    template: function PersonGeneratorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function PersonGeneratorComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.generate();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"h3\");\n        i0.ɵɵtext(3, \"Crit\\xE8res de g\\xE9n\\xE9ration :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵtext(5, \" Veuillez saisir le nombre de personnes \\xE0 g\\xE9n\\xE9rer ainsi que le choix du genre. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"mat-form-field\", 3);\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, PersonGeneratorComponent_mat_error_8_Template, 2, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"mat-checkbox\", 7);\n        i0.ɵɵtext(11, \"Homme\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-checkbox\", 8);\n        i0.ɵɵtext(13, \"Femme\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 9)(15, \"button\", 10);\n        i0.ɵɵtext(16, \" G\\xE9n\\xE9rer \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.generator);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.generator.get(\"count\").errors == null ? null : ctx.generator.get(\"count\").errors.countExceeded);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"disabled\", ctx.generator.invalid);\n      }\n    },\n    styles: [\"form[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:center}form[_ngcontent-%COMP%]   div[_ngcontent-%COMP%], form[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{flex:1;align-items:center;display:flex;justify-content:center}form[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{flex-direction:column}form[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{font-style:italic;font-size:.7em}form[_ngcontent-%COMP%]   .count[_ngcontent-%COMP%]{flex:1}form[_ngcontent-%COMP%]   .gender[_ngcontent-%COMP%]{display:flex;justify-content:center}form[_ngcontent-%COMP%]   .gender[_ngcontent-%COMP%]   mat-checkbox[_ngcontent-%COMP%]{width:150px}\"]\n  });\n  return PersonGeneratorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}